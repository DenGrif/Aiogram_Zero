import asyncio
from datetime import datetime, timedelta
import random
import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from config import TOKEN, WEATHER_API_KEY, THE_CAT_API_KEY, NASA_API_KEY
from keyboard2 import main as main_keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏–∏ API
def get_weather(city_name: str):
    from pyowm import OWM
    owm = OWM(WEATHER_API_KEY)
    mgr = owm.weather_manager()
    try:
        observation = mgr.weather_at_place(city_name)
        weather = observation.weather
        temp = weather.temperature('celsius')["temp"]
        wind = weather.wind()["speed"]
        status = weather.detailed_status

        # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        translated_status = {
            "clear sky": "—è—Å–Ω–æ–µ –Ω–µ–±–æ",
            "few clouds": "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
            "scattered clouds": "—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞",
            "broken clouds": "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
            "overcast clouds": "–ø–∞—Å–º—É—Ä–Ω–æ",
            "light rain": "–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å",
            "moderate rain": "—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
            "snow": "—Å–Ω–µ–≥"
        }
        status_ru = translated_status.get(status, status)
        return f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å\n–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {status_ru}"
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

def get_random_apod():
    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)
    random_date = start_date + (end_date - start_date) * random.random()
    date_str = random_date.strftime("%Y-%m-%d")

    url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}&date={date_str}'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return {"url": "", "title": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ NASA"}

def get_breed_info(breed_name):
    url = "https://api.thecatapi.com/v1/breeds"
    headers = {"x-api-key": THE_CAT_API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        breeds = response.json()
        for breed in breeds:
            if breed['name'].lower() == breed_name.lower():
                return breed
    return None

def get_cat_image_by_breed(breed_id):
    url = f"https://api.thecatapi.com/v1/images/search?breed_ids={breed_id}"
    headers = {"x-api-key": THE_CAT_API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        return data[0]['url'] if data else None
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:\n"
        f"üå§ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞\n"
        f"üåå –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∏–∑ NASA APOD\n"
        f"üêæ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–¥–∞—Ö –∫–æ—à–µ–∫\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        f"/random_apod - –§–æ—Ç–æ NASA\n"
        f"/cats - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä–æ–¥–∞—Ö –∫–æ—à–µ–∫",
        reply_markup=main_keyboard
    )

@dp.message(Command("random_apod"))
async def random_apod_handler(message: Message):
    apod = get_random_apod()
    if apod['url']:
        await message.answer_photo(photo=apod['url'], caption=apod['title'])
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ NASA.")

@dp.message(Command("weather"))
async def weather_start_handler(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")

@dp.message(Command("cats"))
async def cats_start_handler(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∫–æ—à–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π.")

@dp.message()
async def general_message_handler(message: Message):
    if message.text.lower() == "–ø–æ–≥–æ–¥–∞":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")
    elif message.text.lower() == "—Ñ–æ—Ç–æ –Ω–∞—Å–∞":
        apod = get_random_apod()
        if apod['url']:
            await message.answer_photo(photo=apod['url'], caption=apod['title'])
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ NASA.")
    elif message.text.lower() == "–ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∫–æ—à–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π.")
    else:
        if message.text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç
            city_name = message.text.strip()
            weather_info = get_weather(city_name)
            if weather_info.startswith("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"):
                await message.answer(weather_info)
            else:
                breed_info = get_breed_info(city_name)
                if breed_info:
                    image_url = get_cat_image_by_breed(breed_info['id'])
                    info = (
                        f"–ü–æ—Ä–æ–¥–∞: {breed_info['name']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {breed_info['description']}\n"
                        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {breed_info['life_span']} –ª–µ—Ç"
                    )
                    if image_url:
                        await message.answer_photo(photo=image_url, caption=info)
                    else:
                        await message.answer(info)
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
